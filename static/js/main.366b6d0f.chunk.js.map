{"version":3,"sources":["signup/service/signup.service.ts","styled-tags/box.tsx","styled-tags/button.tsx","styled-tags/flex.tsx","styled-tags/input.tsx","styled-tags/label.tsx","message/message.tsx","signup/components/signup-form.tsx","serviceWorker.js","index.tsx"],"names":["status","signupService","data","axios","post","campaignUuid","then","response","message","toLowerCase","catch","error","errors","email","emailChecker","console","Box","styled","div","compose","color","layout","space","Button","button","cursor","width","padding","borderStyle","border","Flex","display","flexDirection","flexbox","Input","input","StyledLabel","p","Label","children","colors","success","backgroundColor","MessageBox","messageData","bg","SignupForm","React","useState","setMessageData","validateEmail","a","emailAlreadyExists","EmailValidator","m","initialValues","firstname","lastname","password","onSubmit","values","actions","submit","setSubmitting","props","handleSubmit","as","type","value","name","required","mt","onChange","handleChange","onBlur","validateField","validate","borderColor","disabled","isSubmitting","isValid","dirty","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kRAWMA,EACW,SADXA,EAEY,UAFZA,EAGU,QAgDHC,EAAgB,I,+FA5CbC,GACZ,OAAOC,IACJC,KADI,oCACsC,CACzCC,aAXa,uCAYbH,SAEDI,MAAK,SAAUC,GACd,MAAO,CACLC,QAASD,EAASL,KAAKM,QACvBR,OACEO,EAASL,KAAKA,KAAKF,OAAOS,gBAAkBT,EACxCA,EACAA,MAGTU,OAAM,SAAUC,GAAQ,IAAD,MACtB,MAAO,CACLH,QAAO,OAAEG,QAAF,IAAEA,GAAF,UAAEA,EAAOJ,gBAAT,iBAAE,EAAiBL,YAAnB,iBAAE,EAAuBU,OAAO,UAAhC,aAAE,EAAkCJ,QAC3CR,OAAQA,Q,4EAKUa,G,gGAEKV,IAAMC,KAAN,wCAEzB,CACEC,aApCW,uCAqCXH,KAAM,CAAEW,W,cAJNC,E,yBAQCA,EAAaZ,KAAKA,KAAKF,Q,uCAE9Be,QAAQJ,MAAR,M,kBACO,CACLH,QAAS,yCACTR,OAAQA,I,sIC7CHgB,EAAMC,IAAOC,IACxBC,YAAQC,IAAOC,IAAQC,MCDZC,EAASN,IAAOO,OAG3B,CACEC,OAAQ,UACRC,MAAO,OACPC,QAAS,OACTC,YAAa,QAEfT,YAAQU,IAAQT,IAAOE,MCTZQ,EAAOb,IAAOC,IAGzB,CACEa,QAAS,OACTC,cAAe,UAEjBb,YAAQC,IAAOa,IAASX,M,gGChBnB,IAAMY,EAAQjB,IAAOkB,MAAV,K,2FCClB,IAAMC,EAAcnB,IAAOoB,EAAV,KAIJC,EAAiB,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OAAgB,kBAACH,EAAD,KAAcG,ICHtDC,EAAS,CACbC,QAAS,CACPC,gBAAiB,UACjBtB,MAAO,WAETT,MAAO,CACL+B,gBAAiB,UACjBtB,MAAO,YAIEuB,EAAsC,SACjDC,GACI,IAAD,IACH,OACE,kBAAC5B,EAAD,CAAKqB,EAAG,EACNQ,GAAE,UAAEL,EAAOI,EAAY5C,eAArB,aAAE,EAA4B0C,gBAChCtB,MAAK,UAAEoB,EAAOI,EAAY5C,eAArB,aAAE,EAA4BoB,OAElCwB,EAAYpC,UCfNsC,EAAuB,WAAO,IAAD,EACFC,IAAMC,SAC1C,MAFsC,mBACjCJ,EADiC,KACpBK,EADoB,KAKlCC,EAAa,uCAAG,WAAOrC,GAAP,eAAAsC,EAAA,sEACalD,EAAca,aAAaD,GADxC,UACduC,EADc,OAEfC,WAAwBxC,GAFT,yCAGX,iBAHW,WAITuC,EAJS,yCAKX,wBALW,2CAAH,sDAQnB,OACE,kBAACpC,EAAD,CAAKU,MAAM,QAAQ4B,EAAE,QACnB,2CACCV,GACC,kBAAC,EAAD,CAAYpC,QAASoC,EAAYpC,QAASR,OAAQ4C,EAAY5C,SAEhE,kBAAC,IAAD,CACEuD,cAAe,CAAEC,UAAW,GAAIC,SAAU,GAAI5C,MAAO,GAAI6C,SAAU,IACnEC,SAAQ,uCAAE,WAAOC,EAAQC,GAAf,SAAAV,EAAA,sEACyBlD,EAAca,aAC7C8C,EAAO/C,OAFD,OAIiC,OAJjC,OAIeJ,cACrBR,EAAc6D,OAAOF,GAAQtD,MAAK,SAAUC,GAC1C0C,EAAe1C,MAGjB0C,EAAe,CACbzC,QACE,6EACFR,OAAQ,UAIZ6D,EAAQE,eAAc,GAhBd,2CAAF,0DAmBP,SAACC,GAAD,OACC,0BAAML,SAAUK,EAAMC,cACpB,kBAACnC,EAAD,KACE,kBAAC,EAAD,mBACA,kBAAC,IAAD,CACEoC,GAAIhC,EACJiC,KAAK,OACLC,MAAOJ,EAAMJ,OAAOJ,UACpBa,KAAK,YACLC,UAAQ,IAETN,EAAMpD,OAAO4C,WACZ,kBAACxC,EAAD,CAAKuD,GAAI,GACT,kBAAC,EAAD,CAAY/D,QAASwD,EAAMpD,OAAO4C,UAAWxD,OAAO,YAIxD,kBAAC8B,EAAD,KACE,kBAAC,EAAD,kBACA,kBAAC,IAAD,CACEoC,GAAIhC,EACJiC,KAAK,OACLK,SAAUR,EAAMS,aAChBL,MAAOJ,EAAMJ,OAAOH,SACpBY,KAAK,WACLC,UAAQ,IAETN,EAAMpD,OAAO6C,UACZ,kBAACzC,EAAD,CAAKuD,GAAI,GACT,kBAAC,EAAD,CAAY/D,QAASwD,EAAMpD,OAAO6C,SAAUzD,OAAO,YAIvD,kBAAC8B,EAAD,KACE,kBAAC,EAAD,eACA,kBAAC,IAAD,CACEoC,GAAIhC,EACJiC,KAAK,QACLO,OAAQ,kBAAMV,EAAMW,cAAc,UAClCC,SAAU,WACR,GAAIZ,EAAMJ,OAAO/C,MACf,OAAOqC,EAAcc,EAAMJ,OAAO/C,QAGtCuD,MAAOJ,EAAMJ,OAAO/C,MACpBwD,KAAK,QACLC,UAAQ,IAETN,EAAMpD,OAAOC,OACZ,kBAACG,EAAD,CAAKuD,GAAI,GACP,kBAAC,EAAD,CAAY/D,QAASwD,EAAMpD,OAAOC,MAAOb,OAAO,YAItD,kBAAC8B,EAAD,KACE,kBAAC,EAAD,kBACA,kBAAC,IAAD,CACEoC,GAAIhC,EACJiC,KAAK,WACLK,SAAUR,EAAMS,aAChBL,MAAOJ,EAAMJ,OAAOF,SACpBW,KAAK,WACLC,UAAQ,IAETN,EAAMpD,OAAO8C,UACZ,kBAAC1C,EAAD,CAAKuD,GAAI,GACT,kBAAC,EAAD,CAAY/D,QAASwD,EAAMpD,OAAO8C,SAAU1D,OAAO,YAIvD,kBAAC8B,EAAD,CAAMyC,GAAG,QACP,kBAAChD,EAAD,CACEsB,GAAG,UACHgC,YAAY,UACZzD,MAAM,UACN+C,KAAK,SACLW,SAAUd,EAAMe,eAAiBf,EAAMgB,UAAYhB,EAAMiB,OAL3D,iBC3GMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxF,MAAK,SAAAyF,GACJA,EAAaC,gBAEdtF,OAAM,SAAAC,GACLI,QAAQJ,MAAMA,EAAMH,c","file":"static/js/main.366b6d0f.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { SignupMessage } from \"../../types/index\";\n\ntype SignupFormParams = {\n  firstname: string;\n  lastname: string;\n  email: string;\n  password: string;\n};\n\nconst CAMPAIGNUUID = \"46aa3270-d2ee-11ea-a9f0-e9a68ccff42a\";\nconst status = {\n  ACTIVE_STATUS: \"active\",\n  SUCCESS_STATUS: \"success\",\n  ERROR_STATUS: \"error\",\n};\n\nclass SignupService {\n  public submit(data: SignupFormParams): Promise<SignupMessage> {\n    return axios\n      .post(`https://api.raisely.com/v3/signup`, {\n        campaignUuid: CAMPAIGNUUID,\n        data,\n      })\n      .then(function (response) {\n        return {\n          message: response.data.message,\n          status:\n            response.data.data.status.toLowerCase() === status.ACTIVE_STATUS\n              ? status.SUCCESS_STATUS\n              : status.ERROR_STATUS,\n        } as SignupMessage;\n      })\n      .catch(function (error) {\n        return {\n          message: error?.response?.data?.errors[0]?.message,\n          status: status.ERROR_STATUS,\n        } as SignupMessage;\n      });\n  }\n\n  public async emailChecker(email: string) {\n    try {\n      const emailChecker = await axios.post(\n        `https://api.raisely.com/v3/check-user`,\n        {\n          campaignUuid: CAMPAIGNUUID,\n          data: { email },\n        }\n      );\n\n      return emailChecker.data.data.status;\n    } catch (error) {\n      console.error(error);\n      return {\n        message: \"Error signing up... TRY AGAIN LATER...\",\n        status: status.ERROR_STATUS,\n      };\n    }\n  }\n}\n\nexport const signupService = new SignupService();\n","import styled from \"styled-components\";\nimport {\n  compose,\n  color,\n  layout,\n  space,\n  BackgroundColorProps,\n  LayoutProps,\n  SpaceProps,\n} from \"styled-system\";\n\nexport const Box = styled.div<BackgroundColorProps | LayoutProps | SpaceProps>(\n  compose(color, layout, space)\n);\n","import styled from \"styled-components\";\nimport {\n  border,\n  compose,\n  color,\n  space,\n  BackgroundColorProps,\n  BorderProps,\n  SpaceProps,\n} from \"styled-system\";\n\nexport const Button = styled.button<\n  BackgroundColorProps | BorderProps | SpaceProps\n>(\n  {\n    cursor: \"pointer\",\n    width: \"100%\",\n    padding: \"10px\",\n    borderStyle: \"none\",\n  },\n  compose(border, color, space)\n);\n","import styled from \"styled-components\";\nimport {\n  compose,\n  color,\n  flexbox,\n  space,\n  BackgroundColorProps,\n  FlexboxProps,\n  SpaceProps,\n} from \"styled-system\";\n\nexport const Flex = styled.div<\n  BackgroundColorProps | FlexboxProps | SpaceProps\n>(\n  {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  compose(color, flexbox, space)\n);\n","import styled from \"styled-components\";\n\nexport const Input = styled.input`\n  padding: 5px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledLabel = styled.p`\n  font-size: 18px;\n`;\n\nexport const Label:React.FC = ({children}) => <StyledLabel>{children}</StyledLabel>;\n","import React from \"react\";\nimport { Box } from \"../styled-tags/index\";\nimport { SignupMessage } from \"../types/index\";\n\nconst colors = {\n  success: {\n    backgroundColor: \"#ceead5\",\n    color: \"#154d21\",\n  },\n  error: {\n    backgroundColor: \"#f7d1d5\",\n    color: \"#671a21\",\n  },\n};\n\nexport const MessageBox: React.FC<SignupMessage> = (\n  messageData: SignupMessage\n) => {\n  return (\n    <Box p={2}\n      bg={colors[messageData.status]?.backgroundColor}\n      color={colors[messageData.status]?.color}\n    >\n      {messageData.message}\n    </Box>\n  );\n};\n","import React from \"react\";\nimport { Formik, Field } from \"formik\";\nimport * as EmailValidator from \"email-validator\";\nimport { signupService } from \"../service/signup.service\";\nimport { SignupMessage } from \"../../types\";\nimport { MessageBox } from \"../../message/message\";\nimport { Box, Button, Flex, Input, Label } from \"../../styled-tags/index\";\n\nexport const SignupForm: React.FC = () => {\n  const [messageData, setMessageData] = React.useState<SignupMessage | null>(\n    null\n  );\n\n  const validateEmail = async (email: string) => {\n    const emailAlreadyExists = await signupService.emailChecker(email);\n    if (!EmailValidator.validate(email)) {\n      return \"Invalid Email\";\n    } else if (emailAlreadyExists) {\n      return \"Email already exists\";\n    }\n  };\n  return (\n    <Box width=\"300px\" m=\"auto\">\n      <h1>Signup Form</h1>\n      {messageData && (\n        <MessageBox message={messageData.message} status={messageData.status} />\n      )}\n      <Formik\n        initialValues={{ firstname: \"\", lastname: \"\", email: \"\", password: \"\" }}\n        onSubmit={async (values, actions) => {\n          const emailAlreadyExists = await signupService.emailChecker(\n            values.email\n          );\n          if (emailAlreadyExists.toLowerCase() === \"ok\") {\n            signupService.submit(values).then(function (response) {\n              setMessageData(response);\n            });\n          } else {\n            setMessageData({\n              message:\n                \"This email address has already been registered. Have you tried logging in?\",\n              status: \"error\",\n            });\n          }\n\n          actions.setSubmitting(false);\n        }}\n      >\n        {(props) => (\n          <form onSubmit={props.handleSubmit}>\n            <Flex>\n              <Label>Firstname:</Label>\n              <Field\n                as={Input}\n                type=\"text\"\n                value={props.values.firstname}\n                name=\"firstname\"\n                required\n              />\n              {props.errors.firstname && (\n                <Box mt={2}>\n                <MessageBox message={props.errors.firstname} status=\"error\" />\n              </Box>\n              )}\n            </Flex>\n            <Flex>\n              <Label>Lastname:</Label>\n              <Field\n                as={Input}\n                type=\"text\"\n                onChange={props.handleChange}\n                value={props.values.lastname}\n                name=\"lastname\"\n                required\n              />\n              {props.errors.lastname && (\n                <Box mt={2}>\n                <MessageBox message={props.errors.lastname} status=\"error\" />\n              </Box>\n              )}\n            </Flex>\n            <Flex>\n              <Label>Email:</Label>\n              <Field\n                as={Input}\n                type=\"email\"\n                onBlur={() => props.validateField(\"email\")}\n                validate={() => {\n                  if (props.values.email) {\n                    return validateEmail(props.values.email);\n                  }\n                }}\n                value={props.values.email}\n                name=\"email\"\n                required\n              />\n              {props.errors.email && (\n                <Box mt={2}>\n                  <MessageBox message={props.errors.email} status=\"error\" />\n                </Box>\n              )}\n            </Flex>\n            <Flex>\n              <Label>Password:</Label>\n              <Field\n                as={Input}\n                type=\"password\"\n                onChange={props.handleChange}\n                value={props.values.password}\n                name=\"password\"\n                required\n              />\n              {props.errors.password && (\n                <Box mt={2}>\n                <MessageBox message={props.errors.password} status=\"error\" />\n              </Box>\n              )}\n            </Flex>\n            <Flex mt=\"25px\">\n              <Button\n                bg=\"#2196F3\"\n                borderColor=\"#2196F3\"\n                color=\"#FFFFFF\"\n                type=\"submit\"\n                disabled={props.isSubmitting || !props.isValid || !props.dirty}\n              >\n                SIGNUP\n              </Button>\n            </Flex>\n          </form>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { SignupForm } from \"./signup/components/signup-form\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <SignupForm />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}